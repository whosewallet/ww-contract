{
  "account_name": "name",
  "permission_name": "name",
  "field_name": "string",
  "type_name": "string",
  "table_name": "name",
  "action_name": "name",
  "context_free_type": "bytes",
  "weight_type": "uint16",
  "fields": "field[]",
  "time_point_sec": "time",
  "permission_level": {
    "fields": {
      "actor": "account_name",
      "permission": "permission_name"
    }
  },
  "action": {
    "fields": {
      "account": "account_name",
      "name": "action_name",
      "authorization": "permission_level[]",
      "data": "bytes"
    },
    "docs": {
      "account": "the account containing the deployed contract",
      "name": "the action to be called (from contract's ABI actions)",
      "authorization": "the accounts and permission levels (must have coresponding signatures)",
      "data": "serilized data processed by code (ABI compatible)"
    }
  },
  "permission_level_weight": {
    "fields": {
      "permission": "permission_level",
      "weight": "weight_type"
    }
  },
  "transaction_header": {
    "fields": {
      "expiration": "time_point_sec",
      "region": "uint16",
      "ref_block_num": "uint16",
      "ref_block_prefix": "uint32",
      "packed_bandwidth_words": "uint16",
      "context_free_cpu_bandwidth": "uint16"
    }
  },
  "transaction": {
    "base": "transaction_header",
    "fields": {
      "context_free_actions": "action[]",
      "actions": "action[]"
    },
    "docs": {
      "packed_bandwidth_words": "number of 8 byte words this transaction can compress into"
    }
  },
  "signed_transaction": {
    "base": "transaction",
    "fields": {
      "signatures": "signature[]",
      "context_free_data": "bytes[]"
    }
  },
  "key_weight": {
    "fields": {
      "key": "public_key",
      "weight": "weight_type"
    }
  },
  "authority": {
    "fields": {
      "threshold": "uint32",
      "keys": "key_weight[]",
      "accounts": "permission_level_weight[]"
    }
  },
  "chain_config": {
    "fields": {
      "target_block_size": "uint32",
      "max_block_size": "uint32",
      "target_block_acts_per_scope": "uint32",
      "max_block_acts_per_scope": "uint32",
      "target_block_acts": "uint32",
      "max_block_acts": "uint32",
      "real_threads": "uint64",
      "max_storage_size": "uint64",
      "max_transaction_lifetime": "uint32",
      "max_authority_depth": "uint16",
      "max_transaction_exec_time": "uint32",
      "max_inline_depth": "uint16",
      "max_inline_action_size": "uint32",
      "max_generated_transaction_size": "uint32"
    }
  },
  "type_def": {
    "fields": {
      "new_type_name": "type_name",
      "type": "type_name"
    }
  },
  "field": {
    "fields": {
      "name": "field_name",
      "type": "type_name"
    }
  },
  "struct_def": {
    "fields": {
      "name": "type_name",
      "base": "type_name",
      "fields": "fields"
    }
  },
  "action_def": {
    "fields": {
      "name": "action_name",
      "type": "type_name"
    }
  },
  "table_def": {
    "fields": {
      "name": "table_name",
      "index_type": "type_name",
      "key_names": "field_name[]",
      "key_types": "type_name[]",
      "type": "type_name"
    },
    "docs": {
      "name": "the name of the table",
      "index_type": "the kind of index, i64, i128i128, etc",
      "key_names": "names for the keys defined by keytype",
      "key_types": "the meaning / type of key parameters, how to convert binary key to json",
      "type": "the meaning / type of the binary data stored in this table"
    }
  },
  "abi_def": {
    "fields": {
      "types": "type_def[]",
      "structs": "struct_def[]",
      "actions": "action_def[]",
      "tables": "table_def[]"
    }
  },

  "newaccount": {
    "type": "action",
    "fields": {
      "creator": "account_name",
      "name": "account_name",
      "owner": "authority",
      "active": "authority",
      "recovery": "authority"
    }
  },
  "setcode": {
    "type": "action",
    "fields": {
      "account": "account_name",
      "vmtype": "uint8",
      "vmversion": "uint8",
      "code": "bytes"
    },
    "docs": {
      "account": "the account that is handling the message",
      "vmtype": "the virtual machine type",
      "vmversion": "the virtual machine version",
      "code": "the apply",
      "code_abi": "the interface description of the code"
    }
  },
  "setabi": {
    "type": "action",
    "fields": {
      "account": "account_name",
      "abi": "abi_def"
    },
    "docs": {
      "account": "account that is handling the message",
      "abi": "Application Binary Interface"
    }
  },
  "updateauth": {
    "type": "action",
    "fields": {
      "account": "account_name",
      "permission": "permission_name",
      "parent": "permission_name",
      "data": "authority"
    }
  },
  "deleteauth": {
    "type": "action",
    "fields": {
      "account": "account_name",
      "permission": "permission_name"
    }
  },
  "linkauth": {
    "type": "action",
    "fields": {
      "account": "account_name",
      "code": "account_name",
      "type": "action_name",
      "requirement": "permission_name"
    },
    "docs": {
      "account": "The account to require permissions for",
      "code": "The contract to require permissions to invoke",
      "requirement": "The permission name to require"
    }
  },
  "unlinkauth": {
    "type": "action",
    "fields": {
      "account": "account_name",
      "code": "account_name",
      "type": "action_name"
    },
    "docs": {
      "account": "The account to require permissions for",
      "code": "The contract to require permissions to invoke"
    }
  },
  "postrecovery": {
    "type": "action",
    "fields": {
      "account": "account_name",
      "data": "authority",
      "memo": "string"
    }
  },
  "passrecovery": {
    "type": "action",
    "fields": {
      "account": "account_name"
    }
  },
  "vetorecovery": {
    "type": "action",
    "fields": {
      "account": "account_name"
    }
  },

  "transfer": {
    "type": "action",
    "fields": {
      "from": "account_name",
      "to": "account_name",
      "quantity": "asset",
      "memo": "string"
    }
  },
  "issue": {
    "type": "action",
    "fields": {
      "to": "account_name",
      "quantity": "asset"
    }
  },
  "nonce": {
    "type": "action",
    "fields": {
      "value": "string"
    }
  },
  "regproducer": {
    "type": "action",
    "fields": {
      "producer": "account_name",
      "producer_key": "bytes"
    }
  },
  "stakevote": {
    "type": "action",
    "fields": {
      "voter": "account_name",
      "amount": "asset"
    }
  }
}
